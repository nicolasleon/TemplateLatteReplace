<?php namespace ProcessWire;

use Latte\Engine;
use Latte\Macros\MacroSet;

/**
 * Latte template engine support for ProcessWire.
 * by Roland Toth (tpr)
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

/**
 * Class TemplateLatteReplace
 *
 * @package ProcessWire
 */
class TemplateLatteReplace extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title'    => 'Template Latte Replace',
            'summary'  => __('Latte template engine support for ProcessWire.', __FILE__),
            'href'     => '',
            'author'   => 'Roland Toth',
            'version'  => 26,
            'requires' => 'PHP>=5.4.0, ProcessWire>=3.0.0',
            'autoload' => true,
            'singular' => true,
            'icon'     => 'code'
        );
    }

    protected $latte;
    public $cacheDir;
    public $viewsDir;
    public $defaultLayoutFile;
    public $api_var;

    /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {

        return array(
            "cacheDir"          => str_replace('ProcessWire\\', '', __CLASS__),
            "api_var"           => 'view',
            "viewsDir"          => '',
            "defaultLayoutFile" => '@layout.latte',
            "options"           => array(
                'extraMacros',
            	'useLatteExtension',
                'extraFilters'
            ),
            "fuels"             => array(
                'config',
                'fields',
                'input',
                'languages',
                'log',
                'module',
                'page',
                'pages',
                'sanitizer',
                'session',
                'templates',
                'user'
            )
        );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
        foreach (self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }

    public function ___uninstall() {
        // remove cache dir
        $cacheDir = wire('config')->paths->cache . $this->cacheDir;

        if(wireRmdir($cacheDir, true)) {
            $this->message(__CLASS__ . ': ' . __(" cache directory removed successfully.", __FILE__));
        }
    }

    public function init() {
	    if (in_array('useLatteExtension', $this->options)) {
			$this->wire('config')->templateExtension = 'latte';
	    }
	}

    /**
     * Initialize the module and setup hooks
     */

    public function ready() {

        /**
         * Set new global api variable.
         * Always added to avoid php error.
         */
        require_once __DIR__ . '/LatteView.php';

        $this->wire($this->api_var, new LatteView());

        if ($this->wire('page')->template == 'admin') {
            return;
        }

        $defaultData = self::getDefaultData();

        // add common PW variables to view files
//        foreach ($this->fuels as $fuel) {
        foreach ($defaultData['fuels'] as $fuel) {
            $this->wire($this->api_var)->$fuel = $this->wire($fuel);
        }

        // add global helper functions for string translation
        require_once(__DIR__ . '/global_functions.php');

        // include macros and filters
        if (in_array('extraMacros', $this->options)) {
            require_once __DIR__ . '/_macros.php';
        }

        if (in_array('extraFilters', $this->options)) {
            require_once __DIR__ . '/_filters.php';
        }

        $this->addHookAfter('TemplateFile::render', $this, 'hookRender');
    }


    public function hookRender(HookEvent $event) {

        $api_var = $this->wire($this->api_var);

        $templateFile = $event->object;

        if ($templateFile->page->template == 'admin') {
            return;
        }

        // no need to process HannaCode (type PHP causes error)
        if (strpos($templateFile->filename, 'HannaCode') !== false) {
            return;
        }

        if ($templateFile->filename != "") {
            // this is a page render, go ahead and process the output
            $event->return = $this->renderLatteString($templateFile->filename, $api_var);
        }
    }

    /**
     * Get the Latte engine.
     *
     * @return Engine
     */
    public function getLatte() {

        if (!isset($this->latte)) {

            require_once __DIR__ . '/latte/latte.php';

            $latte = new Engine;
            $latte->setTempDirectory($this->wire('config')->paths->cache . $this->cacheDir);

            // set default layout file (as of Latte 2.4)
            $latte->addProvider('coreParentFinder', function ($template) {
                if (!$template->getReferenceType()) { // is not referenced, i.e. not included, is not layout itself, â€¦
                    $path = str_replace('//', '/', $this->config->paths->templates . '/' . $this->viewsDir . '/' . $this->defaultLayoutFile);
                    return $path;
                }
            });

            $this->latte = $latte;
        }

        return $this->latte;
    }

    /**
     * @param $templateFilename
     * @param $view
     *
     * @return string
     * @throws \Exception
     * @throws \Throwable
     */
    public function renderLatteString($templateFilename, $view) {

        $this->getLatte();

        // add filters
        if (!empty($view->_filters)) {
            foreach ($view->_filters as $key => $value) {
                $this->latte->addFilter($key, $value);
            }
        }

        // this makes _'string' work in .latte files
        $this->latte->addFilter('translate', function () {
            return _t(func_get_args());
        });

        // add macros
        if (!empty($view->_addMacro)) {
            $set = new MacroSet($this->latte->getCompiler());
            foreach ($view->_addMacro as $key => $value) {
                $set->addMacro($value[0], $value[1], $value[2]);
            }
        }

        $filename = basename(basename($templateFilename), ".php");
        $viewFile = isset($view->viewFile) ? $view->viewFile : $filename;


        // enable template file with/without extension
        $viewFile = str_replace('.latte', '', $viewFile);

        // if first character is "/", set viewRootDir empty
        if (substr($viewFile, 0, 2) === '//') {
            $viewRootDir = '';
            // remove the starting "//" characters
            $viewFile = substr($viewFile, 2);
        } else {
            $viewRootDir = $this->wire('config')->paths->templates . $this->viewsDir . '/';
        }

        $markup = $this->latte->renderToString($viewRootDir . $viewFile . '.latte', (array) $view);

        if (isset($view->json_encode) && boolval($view->json_encode)) {
            $markup = json_encode($markup, $view->json_encode);
        }

        return $markup;
    }

    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     *
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $defaultData = self::getDefaultData();
        $data        = array_merge($defaultData, $data);

        // clear cache
        if (wire('input')->post->submit_save_module) {
            if (wire('input')->post->clearCache) {
                $cacheDir = wire('config')->paths->cache . $data['cacheDir'];
                if (file_exists($cacheDir)) {
                    array_map('unlink', glob($cacheDir . "/*"));
                    wire()->message(__CLASS__ . ': ' . __(" cache cleared successfully.", __FILE__));
                }
            }
        }

        // show warning if views directory doesn't exist
        if (!file_exists(wire('config')->paths->templates . $data['viewsDir']) && !wire('input')->post->viewsDir) {
            wire()->warning(__CLASS__ . ': ' . __("views directory doesn't exist: ", __FILE__) . ' "' . $data['viewsDir'] . '" ' . __("in", __FILE__) . ' "' . wire('config')->urls->templates . '"');
        }

        $wrapper = new InputfieldWrapper();

        $fieldName = 'api_var';
        $f         = wire('modules')->get("InputfieldText");
        $f->attr('name', $fieldName);
        $f->label       = __('API variable', __FILE__);
        $f->description = __('Name of the variable that is passed to the view files.', __FILE__);
        $f->notes       = __('Example: `view` (use as $view->myVar = ... in template files.)', __FILE__);
        $f->columnWidth = 34;
        $f->collapsed   = Inputfield::collapsedNever;
        $f->value       = !empty($data[ $fieldName ]) ? wire('sanitizer')->varName(trim($data[ $fieldName ]), '/\\') : $defaultData[ $fieldName ];
        $wrapper->add($f);

        $fieldName = 'viewsDir';
        $f         = wire('modules')->get("InputfieldText");
        $f->attr('name', $fieldName);
        $f->label       = __('Default directory for views', __FILE__);
        $f->description = __('Directory name for .latte" files (relative to site/templates).', __FILE__);
        $f->notes       = __('Example: `views`', __FILE__);
        $f->collapsed   = 2;
        $f->columnWidth = 33;
        $f->collapsed   = Inputfield::collapsedNever;
        $f->value       = !empty($data[ $fieldName ]) ? trim($data[ $fieldName ], '/\\') : $defaultData[ $fieldName ];
        $wrapper->add($f);

        $fieldName = 'defaultLayoutFile';
        $f         = wire('modules')->get("InputfieldText");
        $f->attr('name', $fieldName);
        $f->label       = __('Default layout file', __FILE__);
        $f->description = __('The base layout file that all views will use.', __FILE__);
        $f->notes       = __('Example: `@layout.latte` or `layouts/@default.latte`', __FILE__);
        $f->collapsed   = 2;
        $f->columnWidth = 33;
        $f->collapsed   = Inputfield::collapsedNever;
        $f->value       = !empty($data[ $fieldName ]) ? trim($data[ $fieldName ], '/\\') : $defaultData[ $fieldName ];
        $wrapper->add($f);

        $fieldName    = 'options';
        $f            = wire('modules')->get('InputfieldCheckboxes');
        $f->name      = $fieldName;
        $f->label     = __('Options', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('extraMacros', __('Load additional macros', __FILE__) . ' `(n:page, n:pages, etc.)`');
        $f->addOption('extraFilters', __('Load additional filters', __FILE__) . ' `(getPage`, `getPages`, `etc.)`');
        $f->addOption('useLatteExtension', __('Use `latte` extension - WARNING: rename "admin.php" to "admin.latte" manually!', __FILE__));

        if (isset($data[ $fieldName ])) {
            $f->attr('value', $data[ $fieldName ]);
        }
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'clearCache');
        $f->label       = __('Clear cache', __FILE__);
        $f->description = __('If checked, Latte cache will be cleared on saving the module.', __FILE__);
        $f->collapsed   = Inputfield::collapsedNever;
        $f->columnWidth = 34;
        $wrapper->add($f);


//        $fieldName = 'fuels';
//        $f         = wire('modules')->get("InputfieldCheckboxes");
//        $f->attr('name', $fieldName);
//        $f->label       = __('API variables', __FILE__);
//        $f->description = __('Check which API variables should be available by default in the view files.', __FILE__);
//        $f->columnWidth = 100;
//        $f->collapsed   = Inputfield::collapsedNever;
//
////        foreach ($defaultData[$fieldName] as $fuelName) {
//        foreach ($data['allFuels'] as $fuelName) {
//            $f->addOption($fuelName, '$' . $fuelName);
//        }
//
//        if (isset($data[ $fieldName ]) && $data[ $fieldName ]) {
//            $f->attr('value', $data[ $fieldName ]);
//        }
//
//        $wrapper->add($f);

        return $wrapper;
    }
}